// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  role                  Role
  firstname             String
  lastname              String?
  email                 String?  @unique
  phonenumber           String?  @unique
  phoneCountryCode      String?
  isVerifiedEmail       Boolean? @default(false)
  isVerifiedPhonenumber Boolean? @default(false)
  profileURL            String?
  socketId              String?
  latitute              Float?
  longitude             Float?
  rider                 Rider?
  driver                Driver?
  refreshToken          String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([socketId, role, email, phonenumber, id])
}

enum Role {
  Driver
  Rider
}

model Rider {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique @db.ObjectId
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String        @unique @db.ObjectId
  rideHistory     Ride[]        @relation("RiderRideHistory")

  @@index([userId, id])
}

model Driver {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @unique @db.ObjectId
  vehicleType    VehicleType?
  aadhar         Aadhar?       @relation(fields: [aadharId], references: [id])
  pancard        Pancard?      @relation(fields: [pancardId], references: [id])
  registration   Registration? @relation(fields: [registrationId], references: [id])
  license        License?      @relation(fields: [licenseId], references: [id])
  insurance      Insurance?    @relation(fields: [insuranceId], references: [id])
  permit         String?
  status         DriverStatus  @default(Available)
  rideHistory    Ride[]        @relation("DriverRideHistory")
  earnings       Float         @default(0)
  rating         Float         @default(5.0)
  aadharId       String?       @unique @db.ObjectId
  pancardId      String?       @unique @db.ObjectId
  registrationId String?       @unique @db.ObjectId
  licenseId      String?       @unique @db.ObjectId
  insuranceId    String?       @unique @db.ObjectId

  @@index([userId, aadharId, pancardId, registrationId, licenseId, insuranceId, id])
}

model Aadhar {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String
  frontImage String
  backImage  String
  Driver     Driver[]
}

model Pancard {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String
  frontImage String
  backImage  String
  Driver     Driver[]
}

model Registration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String
  frontImage String
  backImage  String
  Driver     Driver[]
}

model License {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String
  dob        DateTime
  frontImage String
  backImage  String
  Driver     Driver[]
}

model Insurance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  number     String
  frontImage String
  backImage  String
  Driver     Driver[]
}

enum DriverStatus {
  Available
  Offline
  OnRide
}

enum VehicleType {
  Bike
  Car
  AutoRickshaw
}

model PaymentMethod {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  cardNumber String
  expiryDate String
  cvv        String
  cardHolder String
  isPrimary  Boolean @default(false)
  Rider      Rider?
}

model Ride {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  rider         Rider         @relation("RiderRideHistory", references: [id], fields: [riderId])
  riderId       String        @db.ObjectId
  driver        Driver?       @relation("DriverRideHistory", references: [id], fields: [driverId])
  driverId      String?       @db.ObjectId
  source        String
  destination   String
  fare          Float
  status        RideStatus    @default(Started)
  paymentStatus PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum RideStatus {
  Started
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
}
